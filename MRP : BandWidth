# MRP variants : bandwidth
import sys
from ortools.sat.python import cp_model
def Input() :
  f=sys.stdin
  [N,M]=[int(x) for x in f.readline().split()]
  [s]=[int(x) for x in f.readline().split()]
  [L]=[int(x) for x in f.readline().split()]
  [B]=[int(x) for x in f.readline().split()]
  Edges=[]
  In={i :[] for i in range(1,N+1)}
  Out={i: [] for i in range(1,N+1)}
  time={}
  cost={}
  bandW={}
  for i in range(M) :
    [u,v,t,c,bw]=[int(x) for x in f.readline().split()]
    Edges.append((u,v))
    Edges.append((v,u))
    In[u].append(v)
    In[v].append(u)
    Out[u].append(v)
    Out[v].append(u)
    time[(u,v)]=t
    time[(v,u)]=t
    cost[(u,v)]=c
    cost[(v,u)]=c
    bandW[(u,v)]=bw
    bandW[(v,u)]=bw
  return N,M,s,L,B,Edges,In,Out,time,cost,bandW
N,M,s,L,B,Edges,In,Out,time,cost,bandW=Input()
model=cp_model.CpModel()
# decision variable :
decs={}
for (i,j) in Edges :
  decs[(i,j)]=model.NewIntVar(0,1,"decs("+str(i)+","+str(j)+")")
# Constrain : Package must be transported from a node (may be from source) to another node
for i in range(1,N+1) :
  if i==s :
    model.Add(sum(decs[j,s] for j in In[s])==0)
  else :
    model.Add(sum(decs[j,i] for j in In[i])==1)
# Constrain : We Only travel on 1 direction u->v or v->u
# Constrain : 
for (i,j) in Edges :
  if bandW[(i,j)]< B :
    model.Add(decs[(i,j)]==0)
# Constrain : 
y={} #time we visit node i
for i in range(1,N+1) :
  y[i]=model.NewIntVar(0,L,"y("+str(i)+")")
model.Add(y[s]==0)
for (i,j) in Edges :
  c=model.NewBoolVar("c")
  model.Add(decs[(i,j)]==1).OnlyEnforceIf(c)
  model.Add(y[j]==y[i]+time[(i,j)]).OnlyEnforceIf(c)
  model.Add(decs[(i,j)]==0).OnlyEnforceIf(c.Not())
# Objective :
totalL=model.NewIntVar(0,100000,"totalL")
model.Add(totalL==sum(decs[(i,j)]*cost[(i,j)] for (i,j) in Edges))
model.Minimize(totalL)
solver=cp_model.CpSolver()
status=solver.Solve(model)
if status==cp_model.OPTIMAL :
  print("Total Cost : ",solver.ObjectiveValue)
  Ans=[]
  K=0
  for (i,j) in Edges :
    if solver.value(decs[(i,j)])==1 :
      Ans.append((i,j))
      K +=1
  print(K)
  for (i,j) in Ans :
    print((i,j))
else :
  print("No answer")


  
